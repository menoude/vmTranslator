add sub and or
SP--					@SP, M=M-1
D=*SP					A=M, D=M
*(SP-1) = *(SP-1) + D	@SP, A=M-1, M=M(+ - & |)D

neg not
*(SP-1) = (- !)*(SP-1)	@SP, A=M-1, M=(- !)M

eq gt lt
SP--				@SP, M=M-1
D=*SP			    A=M, D=M
D = *(SP- 1) - D	@SP, A=M-1, D=M-D
*(SP - 1) = -1		M=-1
if (!D) {			@FALSE, D;(JNE JLE JGE)
	*(SP-1) = -1	@END, 0;JMP
}				    (FALSE) 
                    @SP, A=M-1, M=0
				    (END)

push (LCL, ARG, THIS, THAT) i
D = *(SEG+i)		@i, D=A, @(LCL, ARG, THIS, THAT), A=D+M, D=M
SP++				@SP, M=M+1, A=M-1,
(SP-1) = D			M=D

push (temp, pointer) i
D = *(temp + i)		@temp+i, D=M
SP++				@SP, M=M+1
*(SP - 1) = D		A=M-1, M=D

push static i
D=FILE.#			@FILE.#, D=M
SP++				@SP, M=M+1,
*(SP-1) = D			A=M-1, M=D

push constant i
D=i					@i, D=A
SP++				@SP, M=M+1
*(SP-1) = D			A=M-1 M=D  

pop (LCL, ARG, THIS, THAT) i
@i
D=A
@(label)
D=D+M // ADRESSE FINALE EST STOCKEE
@SP
AM=M-1
D=D+M // D A L'ADRESSE FINALE + LA VALEUR A COPIER
A=D-M // A A L'ADRESSE FINALE
M=D-A // DANS L'ADRESSE FINALE ON MET D - L'ADRESSE

pop (temp, pointer) i
@(address)
D=A // ADRESSE FINALE EST STOCKEE
@SP
AM=M-1
D=D+M // D A L'ADRESSE FINALE + LA VALEUR A COPIER
A=D-M // A A L'ADRESSE FINALE
M=D-A // DANS L'ADRESSE FINALE ON MET D - L'ADRESSE

pop static i
@SP
AM=M-1
D=M
@(name.#)
M=D